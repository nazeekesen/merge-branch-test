name: Combined_Merge_and_Generate_Assessment

on:
  workflow_dispatch:
    inputs:
      openai_api_key:
        description: 'OpenAI API Key (optional; uses secret if empty)'
        required: false
      run_mode:
        description: 'Choose how to run ./run.sh'
        required: true
        type: choice
        options:
          - Without Previous Scores
          - With Previous Scores
        default: Without Previous Scores
  push:
    paths:
      - 'merge/**'
      - 'report_generation/**'
      - '.github/workflows/combined_assessment.yml'

jobs:
  merge-reports:
    name: Merge Markdown
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install merge dependencies
        run: |
          python3 -m pip install --upgrade pip
          if [ -f merge/requirements.txt ]; then
            python3 -m pip install -r merge/requirements.txt
          fi
          python3 -m pip install openai

      - name: Run merge script
        env:
          OPENAI_API_KEY: ${{ github.event.inputs.openai_api_key || secrets.OPENAI_API_KEY }}
        run: python3 merge/combine.py

      - name: Auto-fix combined_report.md to match template
        run: |
          TEMPLATE="report_generation/data/combined_report_original.md"
          CANDIDATE="merge/output/combined_report.md"
          FIXER="merge/fix_report.py"

          test -f "$CANDIDATE" || { echo "Missing $CANDIDATE"; exit 1; }
          test -f "$TEMPLATE"  || { echo "Missing $TEMPLATE"; exit 1; }

          python3 "$FIXER" "$TEMPLATE" "$CANDIDATE" --inplace --no-placeholder --drop-extra

      - name: Normalize report (spacing + required values)
        run: |
          python3 merge/normalize_report.py merge/output/combined_report.md


      - name: Validate fixed report structure
        run: |
          python3 merge/validate_report.py \
            report_generation/data/combined_report_original.md \
            merge/output/combined_report.md


      - name: Upload merged Markdown
        uses: actions/upload-artifact@v4
        with:
          name: final-merged-report
          path: merge/output/combined_report.md
          if-no-files-found: error

  generate-with-dash:
    name: Generate Dash Server and Export Reports
    needs: merge-reports
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: report_generation
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download merged Markdown
        uses: actions/download-artifact@v4
        with:
          name: final-merged-report
          path: report_generation/data/input

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install report dependencies
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install -r requirements.txt

      - name: Setup Chrome
        uses: browser-actions/setup-chrome@v1

      - name: Prepare inputs for run.sh
        run: |
          mkdir -p data
          if [ ! -f data/input/combined_report.md ]; then
            echo "Missing data/input/combined_report.md"; exit 1
          fi
          cp data/input/combined_report.md data/combined_report.md

      - name: Ensure run.sh is executable
        run: chmod +x run.sh || true

      - name: Run Dash server and wait until ready
        env:
          RUN_MODE: ${{ github.event.inputs.run_mode }}
        run: |
          set -euo pipefail

          echo "First lines of data/combined_report.md:"
          head -n 10 data/combined_report.md || true

          : > dash.log
          if [ "${RUN_MODE}" = "With Previous Scores" ]; then
            if [ ! -f data/previous_report.md ]; then
              echo "Missing data/previous_report.md"; exit 1
            fi
            CMD="./run.sh -p data/previous_report.md -c data/combined_report.md"
          else
            CMD="./run.sh -c data/combined_report.md"
          fi
          echo "Starting: ${CMD}"

          # Force predictable bind; app should read these if it supports them
          export HOST=0.0.0.0
          export PORT=8050

          nohup ${CMD} >> dash.log 2>&1 &
          APP_PID=$!
          echo "App PID: ${APP_PID}"

          # Wait up to 600s for http://127.0.0.1:8050/
          END=$((SECONDS + 600))
          OK=0
          while [ $SECONDS -lt $END ]; do
            if curl -fsS http://127.0.0.1:8050/ >/dev/null 2>&1; then
              OK=1
              break
            fi
            if ! ps -p "${APP_PID}" >/dev/null 2>&1; then
              echo "Process ${APP_PID} exited early."
              echo "---- dash.log (tail) ----"
              tail -n 100 dash.log || true
              exit 1
            fi
            echo "still waiting..."
            sleep 5
          done

          if [ "$OK" -ne 1 ]; then
            echo "Server did not become ready on 127.0.0.1:8050 within timeout."
            echo "---- dash.log (tail) ----"
            tail -n 100 dash.log || true
            exit 124
          fi

      - name: Upload text report
        uses: actions/upload-artifact@v4
        with:
          name: text-report
          path: report_generation/data/output/report.txt
          if-no-files-found: warn

      - name: Export dashboard to PDF
        run: python3 export_pdf.py --url "http://127.0.0.1:8050" --output dash_report.pdf

      - name: Upload PDF report
        uses: actions/upload-artifact@v4
        with:
          name: dash_report_pdf
          path: report_generation/dash_report.pdf
          if-no-files-found: error
